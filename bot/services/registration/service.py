from validators.registration_validators import RegistrationValidator as validator
from geoapi.geoservice import geo_service
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from typing import Optional, Tuple


from logger.logger_config import get_logger

logger = get_logger(__name__)

class RegistrationService:
    '''–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
       –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       –¥–∞–Ω–Ω—ã—Ö,–º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã.
       –ê—Ç—Ä–∏–±—É—Ç—ã:
            user_id (int): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''

    def __init__(self, user_id: int):
        self.user_id = user_id
    
    #–ú–µ—Ç–æ–¥—ã-–æ–±–µ—Ä—Ç–∫–∏ –Ω–∞–¥ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º,–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ–º –≥—É–ª—è—Ç—å –≤ –±–¥ 
    def set_phone(self, phone):
        return validator.validate_phone(phone)

    def set_username(self, name):
        return validator.validate_username(name)
    
    def set_gender(self, gender):
        return validator.validate_gender(gender)
    
    def set_age(self, age: str) -> int:
        return validator.validate_age(age)
    
    def set_description(self, description: str) -> str:
        return validator.validate_description(description)
    
    def set_zodiac(self, zodiac: str) -> str:
        return validator.validate_zodiac(zodiac)

    async def set_city(self, lat=None, lon=None, city=None):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é.
        Args:
            lat (float, optional): –®–∏—Ä–æ—Ç–∞
            lon (float, optional): –î–æ–ª–≥–æ—Ç–∞
            city (str, optional): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        Returns:
            Tuple[str, str]: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–µ—Ä–≤–∏—Å–∞–º Google
        """
        if not city:
            city, region = await geo_service.set_city(lat, lon)
        elif not lat or not lon:
            city, region = await geo_service.validate_city(city)
        return city, region
    
    async def get_media_id_from_message(self, message: Message) -> str:
        '''–í –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ:
            -–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
            -–≤ —Å–ª—É—á–∞–µ —Å —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∞–µ–º file_id –ª—É—á—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ [-1]
            Args:
                message (Message): –û–±—ä–µ–∫—Ç Message, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å file_id
            Returns:
                file_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º
                –∫ file_id –ø—Ä–µ—Ñ–∏–∫—Å–æ–º  —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–∞–ª—å–Ω–µ—à–µ–≥–æ 
                –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: "media:"/"photo:" + file_id 
            '''
        if message.photo:
            file_id = message.photo[-1].file_id
            file_id = "photo:" + file_id
        elif message.video:
            file_id = message.video.file_id
            file_id = "video:" + file_id
        return file_id
    
    async def collect_media_in_mediagroup(self, media: list[str]) -> MediaGroupBuilder:
        '''
        –§–æ—Ä–º–∏—Ä—É–µ—Ç MediaGroup –∏–∑ —Å–ø–∏—Å–∫–∞ file_id –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.

        Args:
            media (list[str]): –°–ø–∏—Å–æ–∫ media_id c –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ ("photo:", "video:")

        Returns:
            MediaGroupBuilder: —Å–æ–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        '''
        media_group = MediaGroupBuilder()
        for mediafile in media:
            if mediafile.startswith("photo:"):
                media_group.add_photo(media=mediafile.lstrip("photo:"))
            elif mediafile.startswith("video:"):
                media_group.add_video(media=mediafile.lstrip("video:"))
        return media_group
    
    @staticmethod
    def format_user_info(user_data: dict) -> str:
        '''
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∞–Ω–∫–µ—Ç—ã.
        
        Args:
            user_data (dict): –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏ 
            —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ Redis Hash.
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        '''
        username = user_data.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        gender = user_data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").capitalize()
        age = user_data.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        zodiac = user_data.get("zodiac_sign", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").capitalize()
        description = user_data.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        return f"üë§ {username}\nüîπ –ü–æ–ª: {gender}\nüîπ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüîπ –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}\nüìù {description}"