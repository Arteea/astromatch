from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Contact, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from redis_client import redis_client as r
from utils.zodiac_buttons import zodiac_keyboard
from services.registration.service import RegistrationService
from services.registration.cache import RedisRegistrationCache
from middlewares.registration import RegistrationMiddleware
from aiogram.utils.media_group import MediaGroupBuilder

from logger.logger_config import get_logger

logger = get_logger(__name__)



registration_router = Router()
registration_middleware = RegistrationMiddleware()

registration_router.message.middleware(registration_middleware)
registration_router.callback_query.middleware(registration_middleware)

class RegistrationForm(StatesGroup):
    
    phone = State()
    name = State()
    gender = State()
    age = State()
    zodiac = State()
    description = State()
    city = State()
    media = State()
    conclusion = State()



@registration_router.message(Command("start"))
async def cmd_start(message: Message):
    kb = [[KeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω",request_contact=True)]]  
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                  one_time_keyboard=True, 
                                  input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name} –Ø –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –¥–µ–π—Ç–∏–Ω–≥ –±–æ—Ç!\n–°–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ,—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",reply_markup=keyboard)



@registration_router.message(F.contact)
async def handle_contact(message: Message, state: FSMContext,
                        reg_service: RegistrationService,
                        reg_cache: RedisRegistrationCache):
    if message.contact.user_id != message.from_user.id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —á—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üôè")
        return             
    try:
        phone_number = reg_service.set_phone(message.contact.phone_number)
        await reg_cache.set_value("phone", phone_number)
        await state.set_state(RegistrationForm.name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è(–∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –≤–∞—Å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):")
    except Exception as e:
        await message.answer(f"{e}")
        return


@registration_router.message(RegistrationForm.name)
async def handle_username(message: Message, state: FSMContext,
                     reg_service: RegistrationService,
                     reg_cache: RedisRegistrationCache):
    try:
        username = reg_service.set_username(message.text)
        logger.info(f"–ò–ú–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        await reg_cache.set_value("username", username)
        await state.set_state(RegistrationForm.gender)
        kb = [[InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π",callback_data="gender:male"),
            InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb,
                                        resize_keyboard=True,
                                        one_time_keyboard=True, 
                                        input_field_placeholder="–í–∞—à –ø–æ–ª:")
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"{e}")
        return

@registration_router.callback_query(F.data.startswith('gender:'))
async def handle_gender(data: CallbackQuery, state: FSMContext,
                        reg_service: RegistrationService,
                        reg_cache: RedisRegistrationCache):
    try:
        sex = data.data.split(':')[1]
        gender = reg_service.set_gender(sex)
        await reg_cache.set_value("gender", gender)
        await state.set_state(RegistrationForm.age)
        await data.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç:")
        await data.answer()
    except Exception as e:
        await data.message.answer(f"{e}")
        await data.answer()
        return


@registration_router.message(RegistrationForm.age)
async def handle_age(message: Message, state: FSMContext,
                        reg_service: RegistrationService,
                        reg_cache: RedisRegistrationCache):
    try:
        age = reg_service.set_age(message.text)
        await reg_cache.set_value("age", age)
        await state.set_state(RegistrationForm.zodiac)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_keyboard)
    except Exception as e:
        await message.answer(f"{e}")
        return


@registration_router.callback_query(F.data.startswith('zodiac:'))
async def handle_zodiac(data: CallbackQuery, state: FSMContext,
                        reg_service: RegistrationService,
                        reg_cache: RedisRegistrationCache):
    try:
        zodiac_sign = data.data.split(':')[1]
        reg_service.set_zodiac(zodiac_sign)
        await reg_cache.set_value('zodiac_sign',zodiac_sign)
        await state.set_state(RegistrationForm.description)
        await data.message.answer(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ")
        await data.answer()
    except Exception as e:
        print(f"{e}")
        return


@registration_router.message(RegistrationForm.description)
async def handle_description(message: Message, state: FSMContext,
                            reg_service: RegistrationService,
                            reg_cache: RedisRegistrationCache):
    try:
        description = reg_service.set_description(message.text)
        await reg_cache.set_value('description', description)
        kb = [[KeyboardButton(text="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]  
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                  one_time_keyboard=True, 
                                  input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä—É —Ä—è–¥–æ–º —Å –≤–∞–º–∏")
        await state.set_state(RegistrationForm.city)
        await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É,–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –í–∞—à–∏–º –≥–æ—Ä–æ–¥–æ–º", reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"{e}")
        return
    

@registration_router.message(RegistrationForm.city)
async def handle_city(message: Message, state: FSMContext,
                    reg_service: RegistrationService,
                    reg_cache: RedisRegistrationCache):
    try:
        location = message.location
        if location:
            lat,lon = location.latitude, location.longitude
            city, region = await reg_service.set_city(lat=lat, lon=lon)
        elif message.text:
            city, region = await reg_service.set_city(city=message.text)
        await reg_cache.set_value("city", city)
        await reg_cache.set_value("region", region)
        await state.set_state(RegistrationForm.media)
        await message.answer(f"–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏,–º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 5 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        await message.answer(f"{e}")
        return
    

MAX_MEDIA_COUNT = 5

@registration_router.message(StateFilter(RegistrationForm.media),
                             F.content_type.in_({"photo", "video"}))
async def handle_media(message: Message, state: FSMContext,
                    reg_service: RegistrationService,
                    reg_cache: RedisRegistrationCache):
    try:
        set_of_users_media = await reg_cache.get_all_users_media_from_cache()
        logger.info(f'–ù–∞—á–∞–ª—Å—è —à–∞–≥ —Å –º–µ–¥–∏–∞')
        logger.info(f'–í—Å–µ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤{set_of_users_media}')
        if len(set_of_users_media) >= MAX_MEDIA_COUNT:
            await message.answer(f"–ü–æ–ª—É—á–µ–Ω–æ 5 —Ñ–∞–π–ª–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
            await state.set_state(RegistrationForm.conclusion)
            return
        else:
            file_id = await reg_service.get_media_id_from_message(message)
            await reg_cache.add_media(file_id)
            finish_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_media_upload")]])
            # await message.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            #          reply_markup=finish_kb)
            await message.answer(
            f"–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ({len(set_of_users_media)}/{MAX_MEDIA_COUNT}). "
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ 5 —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.",
            reply_markup=finish_kb)
    except Exception as e:
        await message.answer(f"{e}")
        return

@registration_router.message(StateFilter(RegistrationForm.media),
                             F.content_type.in_({"text", "document", "audio", "voice", "sticker", "animation", "location"}))
async def handle_media_error(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã")
    return


@registration_router.callback_query(F.data == "finish_media_upload")
async def redirect_conclusion(data: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationForm.conclusion)
    await data.message.answer("üì® –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞?")
    await data.answer()
    return
    


@registration_router.message(StateFilter(RegistrationForm.conclusion))
async def handle_conclusion(message: Message, state: FSMContext,
                        reg_service: RegistrationService,
                        reg_cache: RedisRegistrationCache):
    logger.info(f"–¢–ï–ü–ï–†–¨ –ó–ê–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–´–ô –®–ê–ì")
    info = await reg_cache.get_all_info_from_cache()
    media = await reg_cache.get_all_users_media_from_cache()
    media_group = await reg_service.collect_media_in_mediagroup(media)
    caption = reg_service.format_user_info(info)
    media_group.caption = caption
    await message.answer_media_group(media=media_group.build())
    return